plugins {
    id 'fahrschein.java-conventions'
    id 'fahrschein.maven-publishing-conventions'
}

dependencies {
    api project(':fahrschein-http-api')
    api project(':fahrschein-http-simple')
    api "com.fasterxml.jackson.core:jackson-databind:${property('jackson_databind.version')}"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${property('jackson.version')}"
    implementation "com.fasterxml.jackson.core:jackson-core:${property('jackson.version')}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${property('jackson.version')}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${property('jackson.version')}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${property('jackson.version')}"

    testImplementation("org.mock-server:mockserver-junit-jupiter-no-dependencies:5.15.0")

    testImplementation ('com.jayway.jsonpath:json-path:2.8.0') {
        exclude group: "org.ow2.asm", module: "asm"
    }
    testImplementation("ch.qos.logback:logback-classic:1.4.11") {
        because "we want to test logging output"
    }
}

publishing.publications.maven.pom.description = 'A Java client for the Nakadi event bus'

def generateResourcesTask = tasks.register("generate-resources", GenerateResourcesTask) {
    resourcesDir.set(layout.buildDirectory.dir("generated-resources/main"))
}

sourceSets {
    main {
        output.dir(generateResourcesTask)
    }
}

idea {
    module {
        // Marks the already(!) added srcDir as "generated"
        generatedSourceDirs += file('build/generated-resources/main')
    }
}

abstract class GenerateResourcesTask extends DefaultTask {

    @Input
    String getVersion() {
        return project.version
    }

    @OutputDirectory
    abstract DirectoryProperty getResourcesDir()

    @TaskAction
    def generateResources() {
        def generated = resourcesDir.file("fahrschein.properties").get().asFile
        generated.text = "fahrschein-version=" + getVersion()
    }
}
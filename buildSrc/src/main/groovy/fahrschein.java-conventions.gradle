plugins {
    id 'java-library'
    id 'jacoco'
    id 'org.owasp.dependencycheck'
}

repositories {
    mavenCentral()
}

group = 'org.zalando'
version = project.property('project.version') + (project.hasProperty('release') ? '' : '-SNAPSHOT')

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

test {
    useJUnitPlatform()
}


tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint:all'
    options.encoding = 'UTF-8'
    options.release = 8
}

dependencies {
    implementation("org.slf4j:slf4j-api:${property('slf4j.version')}") {
        because "we want slf4j-api to be available everywhere"
    }
    testRuntimeOnly("org.slf4j:slf4j-simple:${property('slf4j.version')}") {
        because "we want the slf4j-simple logger implementation available at test runtime"
    }

    // JUnit 5
    testImplementation("org.junit.jupiter:junit-jupiter:${property('junit.version')}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${property('junit.version')}")
    testImplementation("org.mockito:mockito-junit-jupiter:${property('mockito.version')}")
    testImplementation("org.mockito:mockito-core:${property('mockito.version')}") {
        because "We want Mockito to be used in tests"
    }
    testImplementation('org.hamcrest:hamcrest:2.2') {
        because "we want to have hamcrest available for all testing"
    }
    compileOnly('com.google.code.findbugs:jsr305:2.0.1') {
        because "we want to have annotations like @Deprecated available at compilation time"
    }
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute(platform(module('commons-logging:commons-logging'))).
                using module("org.slf4j:jcl-over-slf4j:${property('slf4j.version')}")
        // hamcrest changed package coordinates. Make sure to only include the new one.
        substitute(platform(module('org.hamcrest:hamcrest-core'))).
                using module("org.hamcrest:hamcrest:2.2")
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

